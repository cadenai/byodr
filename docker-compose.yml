version: '2'
volumes:
  volume_zerotier_config:
  volume_wireguard_config:
  volume_ftpd_config:
  volume_byodr_config:
  volume_byodr_sockets:
  volume_byodr_sessions:
services:
  zerotier:
    cpuset: "0"
    image: zyclonite/zerotier:1.6.6
#    container_name: zerotier-one
    restart: always
    network_mode: host
    devices:
      - '/dev/net/tun'
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN
      - CAP_SYS_RAWIO
    volumes:
      - volume_zerotier_config:/var/lib/zerotier-one:rw
  wireguard:
    cpuset: "0"
    image: masipcat/wireguard-go
    container_name: wireguard
    restart: always
    network_mode: host
    devices:
      - '/dev/net/tun'
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN
      - CAP_SYS_RAWIO
    volumes:
      - volume_wireguard_config:/etc/wireguard:rw
  httpd:
    cpuset: "0"
    build:
      context: .
      dockerfile: httpd/Dockerfile
#    image: centipede2donald/byodr-ce:haproxy
#    container_name: byodr_httpd
    restart: always
    network_mode: host
    command: ["python3", "wrap.py"]
    stop_signal: SIGKILL
#    depends_on:
#      - "teleop"
    volumes:
      - volume_byodr_config:/config:rw
  ftpd:
    cpuset: "0"
    build:
      context: ./docker
      dockerfile: pure-ftpd.dockerfile
#    image: centipede2donald/byodr-ce:pure-ftpd-10
#    container_name: pure-ftpd
    restart: always
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - volume_ftpd_config:/etc/pureftpd:rw
      - volume_byodr_sessions:/home/ftpuser:rw
  rosnode:
    cpuset: "0"
    build:
      context: .
      dockerfile: rosnode/Dockerfile
#    image: centipede2donald/byodr-ce:rover_ros
#    container_name: byodr_ros
    restart: always
    command: ["python3", "app.py", "--name", "rosnode"]
    network_mode: host
    stop_signal: SIGKILL
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:ro
  vehicle:
    cpuset: "1"
    build:
      context: .
      dockerfile: vehicles/rover/rover_vehicle.dockerfile
#    image: centipede2donald/byodr-ce:rover_vehicle
#    container_name: byodr_vehicle
    restart: always
    command: ["python3", "app.py", "--name", "vehicle"]
    privileged: true  # NvMedia device creation for omx decoder.
    network_mode: host
    environment:
      LD_PRELOAD: libgomp.so.1
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:rw
  teleop:
    cpuset: "2"
    build:
      context: .
      dockerfile: teleop/Dockerfile
#    image: centipede2donald/byodr-ce:teleop
#    container_name: byodr_teleop
    restart: always
    command: ["python3", "app.py", "--name", "teleop", "--routes", "/sessions/routes"]
    ports:
      - "8080:8080"
    environment:
      LD_PRELOAD: libgomp.so.1
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:rw
      - volume_byodr_sessions:/sessions:ro
  pilot:
    cpuset: "2"
    build:
      context: .
      dockerfile: pilot/Dockerfile
#    image: centipede2donald/byodr-ce:pilot
#    container_name: byodr_pilot
    restart: always
    privileged: true  # Access to usb devices without udev rules.
    command: ["python3", "app.py", "--name", "pilot", "--routes", "/sessions/routes"]
    environment:
      LD_PRELOAD: libgomp.so.1
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:ro
      - volume_byodr_sessions:/sessions:ro
  recorder:
    cpuset: "3"
    build:
      context: .
      dockerfile: recorder/Dockerfile
#    image: centipede2donald/byodr-ce:recorder
#    container_name: byodr_recorder
    restart: always
    command: ["python3", "app.py", "--name", "recorder"]
    environment:
      LD_PRELOAD: libgomp.so.1
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:ro
      - volume_byodr_sessions:/sessions:rw
  inference:
    # cpuset: "3" # - not currently possible with onnx runtime due to a cpu affinity bug.
    build:
      context: .
      dockerfile: inference/runtime-cp36-jp441.dockerfile
#    image: centipede2donald/byodr-ce:inference-tegra
#    container_name: byodr_inference
    restart: always
    privileged: true
    command: ["python3", "-m",  "inference.app", "--user", "/sessions/models", "--routes", "/sessions/routes"]
    environment:
      LD_PRELOAD: libgomp.so.1
    volumes:
      - volume_byodr_sockets:/byodr:rw
      - volume_byodr_config:/config:ro
      - volume_byodr_sessions:/sessions:rw
